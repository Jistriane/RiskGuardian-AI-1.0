{
  "Sprint 1": [
    {
      "title": "Criar Dockerfile para o serviço Backend",
      "body": "- Base image: node:18-alpine\n- Instalar dependências via `npm ci`\n- Copiar código-fonte e build (`npm run build`)\n- Expor porta 8000\n- Entrypoint para `npm start`",
      "labels": ["devops","docker","Sprint 1","Epic: Configuração Inicial"],
      "milestone": "Sprint 1"
    },
    {
      "title": "Criar Dockerfile para o serviço Frontend",
      "body": "- Base image: node:18-alpine\n- Instalar dependências via `npm ci`\n- Copy/build para produção (`npm run build`)\n- Servir com `serve` ou `nginx` embutido\n- Expor porta 3000",
      "labels": ["devops","docker","Sprint 1","Epic: Configuração Inicial"],
      "milestone": "Sprint 1"
    },
    {
      "title": "Ajustar docker-compose.yml com todos os serviços",
      "body": "- Definir serviços: frontend, backend, redis, anvil, db (Postgres ou Mongo)\n- Configurar redes customizadas\n- Montar volumes para código e dados\n- Variáveis de ambiente centralizadas no `.env`",
      "labels": ["devops","docker-compose","Sprint 1","Epic: Configuração Inicial"],
      "milestone": "Sprint 1"
    },
    {
      "title": "Adicionar healthchecks e dependências entre containers",
      "body": "- Em `docker-compose.yml`, usar `healthcheck` para backend e db\n- Configurar `depends_on` com `condition: service_healthy`\n- Garantir que o frontend aguarde o backend",
      "labels": ["devops","docker-compose","Sprint 1","Epic: Configuração Inicial"],
      "milestone": "Sprint 1"
    },
    {
      "title": "Criar scripts para facilitar o fluxo local",
      "body": "- `npm run dev:docker`: sobe serviços em modo hot-reload\n- `npm run down:docker`: derruba stack e limpa volumes\n- Adicionar alias no package.json",
      "labels": ["devops","automation","Sprint 1","Epic: Configuração Inicial"],
      "milestone": "Sprint 1"
    }
  ],
  "Sprint 2": [
    {
      "title": "Criar esqueleto de RiskGuardianCore.sol",
      "body": "- Criar arquivo `contracts/RiskGuardianCore.sol`\n- Declarar `pragma solidity ^0.8.0;`\n- Importar `AutomationCompatibleInterface` (Chainlink)\n- Definir estrutura básica: estado, eventos e construtor",
      "labels": ["blockchain","solidity","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    },
    {
      "title": "Implementar função registerUser(address)",
      "body": "- Função pública `registerUser(address user)` que:\n  1. Verifica se `user` não está registrado\n  2. Armazena `user` num `mapping(address => bool) registeredUsers`\n  3. Emite evento `UserRegistered(address user)`",
      "labels": ["blockchain","solidity","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    },
    {
      "title": "Implementar checkUpkeep e performUpkeep",
      "body": "- Função `checkUpkeep(bytes calldata) external view returns (bool, bytes memory)` que:\n  - Checa se há usuários cadastrados e risco a ser processado\n- Função `performUpkeep(bytes calldata)` que:\n  - Chama lógica interna para processar cada usuário\n  - Emite evento `UpkeepPerformed(uint256 timestamp)`",
      "labels": ["blockchain","solidity","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    },
    {
      "title": "Testar registerUser em Foundry",
      "body": "- Criar arquivo `test/RiskGuardianCore.t.sol`\n- Testes para:\n  - Registrar novo usuário (deve passar)\n  - Tentar registrar usuário já cadastrado (deve reverter)",
      "labels": ["blockchain","solidity","QA","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    },
    {
      "title": "Testar checkUpkeep e performUpkeep em Foundry",
      "body": "- No mesmo `RiskGuardianCore.t.sol`, criar testes para:\n  - `checkUpkeep` retorna `false` sem usuários\n  - `checkUpkeep` retorna `true` após registro\n  - `performUpkeep` emite `UpkeepPerformed`",
      "labels": ["blockchain","solidity","QA","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    },
    {
      "title": "Criar script de deployment para RiskGuardianCore",
      "body": "- Script `scripts/deploy.js` (Hardhat) ou `script/Deploy.s.sol` (Foundry):\n  - Deploy do `RiskGuardianCore` na rede local (Anvil)\n  - Exibir endereço do contrato ao final",
      "labels": ["blockchain","solidity","devops","Sprint 2","Epic: Smart Contracts Core"],
      "milestone": "Sprint 2"
    }
  ],
  "Sprint 3": [
    {
      "title": "Inicializar projeto backend com Node.js, Express e TypeScript",
      "body": "- Criar pasta `backend/`\n- Executar `npm init -y` e instalar `express`, `typescript`, `ts-node-dev`\n- Configurar `tsconfig.json`\n- Adicionar script `npm run dev`: `ts-node-dev --respawn src/index.ts`",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Configurar conexão com DynamoDB",
      "body": "- Instalar AWS SDK (`@aws-sdk/client-dynamodb`, `@aws-sdk/lib-dynamodb`)\n- Criar `src/lib/dynamo.ts` com cliente e helper de marshalling\n- Carregar credenciais pelo `.env` (`AWS_REGION`, `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`)",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Definir modelo de dados Portfolio",
      "body": "- Criar interface `Portfolio { user: string; assets: { symbol: string; amount: number }[] }`\n- Validar correspondência com a tabela DynamoDB\n- Adicionar types em `src/models/portfolio.ts`",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Implementar endpoint GET /api/portfolio",
      "body": "- Em `src/routes/portfolio.ts`, criar handler GET `/api/portfolio?user=<address>`\n- Buscar item no DynamoDB pela chave `user`\n- Retornar 200 + JSON do `Portfolio` ou 404 se não encontrado",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Implementar endpoint POST /api/portfolio",
      "body": "- Handler POST `/api/portfolio` recebe JSON { user, assets }\n- Faz `putItem` no DynamoDB (sobrescreve ou cria)\n- Retorna 201 e o objeto criado",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Adicionar validação de payload com Zod",
      "body": "- Instalar `zod`\n- Definir schemas em `src/schemas/portfolio.schema.ts`\n- Validar `req.body` no POST e `req.query` no GET",
      "labels": ["backend","api","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Escrever testes unitários para GET e POST /api/portfolio",
      "body": "- Configurar Jest e Supertest\n- Criar `test/portfolio.test.ts` com mocks de DynamoDB\n- Testar cenários de sucesso e erro (404, 400)",
      "labels": ["backend","api","QA","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    },
    {
      "title": "Documentar endpoints /api/portfolio no README",
      "body": "- Adicionar seção **API** no `README.md`\n- Exemplos de chamada GET e POST\n- Descrever environment variables necessárias",
      "labels": ["backend","documentation","Sprint 3","Epic: Backend & APIs"],
      "milestone": "Sprint 3"
    }
  ],
  "Sprint 4": [
    {
      "title": "Adicionar Chainlink Data Feed em RiskGuardianCore.sol",
      "body": "- Importar `AggregatorV3Interface`\n- Declarar variável `priceFeed` com endereço do contrato de preço\n- Inicializar `priceFeed` no construtor",
      "labels": ["chainlink","oracles","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    },
    {
      "title": "Implementar função getLatestPrice() no contrato",
      "body": "- Em `RiskGuardianCore.sol`, criar `function getLatestPrice() public view returns (int)`\n- Retornar `priceFeed.latestAnswer()`",
      "labels": ["chainlink","oracles","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    },
    {
      "title": "Testar getLatestPrice() em Foundry",
      "body": "- Adicionar mocks de `AggregatorV3Interface` em `test/RiskGuardianCore.t.sol`\n- Escrever testes para preço redondo e casos de erro",
      "labels": ["chainlink","QA","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    },
    {
      "title": "Criar script registerUpkeep.js para Chainlink Automation",
      "body": "- Em `/scripts/registerUpkeep.js`, usar `@chainlink/contracts` e Hardhat\n- Configurar parâmetros: `contractAddress`, `gasLimit`, `interval`\n- Executar `npx hardhat run scripts/registerUpkeep.js --network localhost`",
      "labels": ["chainlink","automation","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    },
    {
      "title": "Validar Upkeep no backend/local",
      "body": "- Simular chamada `checkUpkeep` em script `scripts/runUpkeep.js`\n- Confirmar que `performUpkeep` dispara evento `UpkeepPerformed`",
      "labels": ["chainlink","QA","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    },
    {
      "title": "Documentar integração de Oráculos no README",
      "body": "- Adicionar seção **Oráculos Chainlink**\n- Explicar Data Feed address, mocks de teste e como registrar Upkeep\n- Exemplos de comandos para Hardhat",
      "labels": ["chainlink","documentation","Sprint 4","Epic: Chainlink Oracles"],
      "milestone": "Sprint 4"
    }
  ],
  "Sprint 5": [
    {
      "title": "Gerar dataset de treino para modelo de risco",
      "body": "- Criar script `scripts/generate_dataset.py`\n- Reunir dados simulados de portfólio (preço, quantidade, timestamp)\n- Salvar CSV em `data/portfolio_dataset.csv`",
      "labels": ["AI/ML","machine-learning","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    },
    {
      "title": "Desenvolver modelo TensorFlow para score de risco",
      "body": "- Em `ml/model.py`, criar rede neural simples\n- Treinar modelo com dataset gerado\n- Exportar artefato `model.h5`",
      "labels": ["AI/ML","machine-learning","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    },
    {
      "title": "Containerizar e empacotar modelo para Lambda",
      "body": "- Dockerfile em `ml/Dockerfile`\n- Incluir dependências (`tensorflow`, `pandas`)\n- Gerar imagem e testar localmente via `docker run`",
      "labels": ["AI/ML","lambda","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    },
    {
      "title": "Deploy do modelo em AWS Lambda",
      "body": "- Criar função Lambda via AWS CLI (`aws lambda create-function`)\n- Configurar handler em `handler.py`\n- Testar invocação com payload de exemplo",
      "labels": ["AI/ML","lambda","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    },
    {
      "title": "Integrar chamada ao modelo no backend",
      "body": "- Em `src/routes/portfolio.ts`, adicionar nova rota `/api/risk`\n- Chamar Lambda via SDK AWS\n- Retornar score de risco no JSON",
      "labels": ["backend","AI/ML","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    },
    {
      "title": "Documentar pipeline IA/ML no README",
      "body": "- Adicionar seção **IA/ML** no `README.md`\n- Explicar geração de dataset, treinamento, deployment e rota `/api/risk`\n- Exemplos de uso e variáveis de ambiente",
      "labels": ["documentation","AI/ML","Sprint 5","Epic: IA/ML"],
      "milestone": "Sprint 5"
    }
  ],
  "Sprint 6": [
    {
      "title": "Inicializar Next.js + Tailwind + RainbowKit",
      "body": "- Criar app Next.js em `frontend/`\n- Instalar e configurar Tailwind CSS\n- Instalar RainbowKit e wagmi para conexão de carteira\n- Testar botão “Connect Wallet” em http://localhost:3000",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Criar página Dashboard",
      "body": "- Em `pages/index.tsx`, criar layout com três cards: Saldo, Portfólio e Risco\n- Usar componentes básicos (Card, Header, Footer)\n- Exibir placeholders “Loading…” antes de consumir API",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Integrar GET /api/portfolio",
      "body": "- Após wallet conectada, disparar fetch para `/api/portfolio?user=<endereço>`\n- Armazenar resposta em React Context ou Zustand\n- Preencher lista de assets no Dashboard",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Exibir chart de ativos",
      "body": "- Instalar Recharts\n- Em `components/PortfolioChart.tsx`, renderizar gráfico (pizza ou barras) dos assets\n- Mostrar tooltip com símbolo e valor de cada fatia/barra",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Consumir /api/risk e exibir score",
      "body": "- Criar chamada a `/api/risk?user=<endereço>`\n- Exibir score (0–100) no Dashboard com badge colorido (verde/amarelo/vermelho)\n- Atualizar automaticamente após carregamento do portfólio",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Implementar estado de carregamento e tratamento de erros",
      "body": "- Adicionar spinners enquanto as APIs carregam\n- Mostrar mensagem de erro e botão “Tentar Novamente” se falhar\n- Garantir UX consistente para GET portfolio e GET risk",
      "labels": ["frontend","web3","Sprint 6","Epic: Frontend MVP"],  
      "milestone": "Sprint 6"
    },
    {
      "title": "Testar componentes com React Testing Library",
      "body": "- Configurar Jest + RTL em `frontend/`\n- Escrever testes para: conexão de carteira, renderização de cards, chamadas mockadas\n- Garantir cobertura mínima de 80% nos components principais",
      "labels": ["frontend","QA","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    },
    {
      "title": "Documentar uso do Frontend no README",
      "body": "- Atualizar `README.md` na raiz ou em `frontend/`\n- Incluir passos: instalação, `npm run dev`, variáveis de ambiente (NEXT_PUBLIC_API_URL)\n- Exemplos de fluxo: conectar wallet e visualizar Dashboard",
      "labels": ["frontend","documentation","Sprint 6","Epic: Frontend MVP"],
      "milestone": "Sprint 6"
    }
  ],
  "Sprint 7": [
    {
      "title": "Escrever testes e2e com Cypress para fluxo Dashboard",
      "body": "- Configurar Cypress em `frontend/`\n- Criar testes para conexão de carteira, fetch de `/api/portfolio` e `/api/risk`\n- Validar exibição de dados e estados de loading/erro",
      "labels": ["frontend","QA","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Escrever testes e2e para fluxo de Hedge completo",
      "body": "- Em scripts de teste, simular portfólio em risco\n- Disparar `performUpkeep` no smart contract via Anvil\n- Validar UI do hedge no Dashboard após execução",
      "labels": ["blockchain","QA","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Implementar caching Redis para /api/portfolio",
      "body": "- Adicionar Redis client no backend (`ioredis` ou similar)\n- Cachear respostas de `/api/portfolio` por 30s\n- Invalidar cache após POST/PUT no portfólio",
      "labels": ["backend","performance","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Otimizar consultas DynamoDB com índices secundários",
      "body": "- Criar GSI em `Portfolios` para consulta por timestamp ou usuário\n- Ajustar código para usar GSI em GET `/api/portfolio`\n- Monitorar latência antes e depois",
      "labels": ["backend","performance","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Ajustar responsividade e layout de Dashboard",
      "body": "- Revisar breakpoints mobile/tablet/desktop\n- Ajustar CSS (Tailwind) para cards se acomodarem em todas resoluções\n- Testar manualmente em Chrome DevTools",
      "labels": ["frontend","ux","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Melhorar acessibilidade e contraste de cores",
      "body": "- Adicionar `aria-labels` e roles nos componentes interativos\n- Verificar contraste de cores via ferramenta (WCAG 2.1)\n- Corrigir problemas de acessibilidade detectados",
      "labels": ["frontend","ux","Sprint 7","Epic: Testes & Ajustes"],  
      "milestone": "Sprint 7"
    },
    {
      "title": "Polir design visual e espaçamentos",
      "body": "- Revisar tema Tailwind (cores, tipografia)\n- Ajustar padding/margin para uniformidade\n- Validar consistência visual em todos os componentes",
      "labels": ["frontend","ux","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    },
    {
      "title": "Corrigir bugs críticos identificados no QA",
      "body": "- Coletar lista de bugs do board ou logs\n- Priorizar correções impactantes\n- Validar correções com novos testes unitários e e2e",
      "labels": ["backend","frontend","QA","Sprint 7","Epic: Testes & Ajustes"],
      "milestone": "Sprint 7"
    }
  ],
  "Sprint 8": [
    {
      "title": "Configurar workflow de CI para build e testes",
      "body": "- Criar arquivo `.github/workflows/ci.yml`\n- Incluir jobs: install, lint, build, test (forge, Jest)\n- Garantir que pipeline falhe em erros de lint ou teste",
      "labels": ["cicd","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Configurar workflow de CD para deploy de containers",
      "body": "- Criar arquivo `.github/workflows/cd.yml`\n- Build das imagens Docker (frontend, backend, ML)\n- Push para Docker Hub (ou registry configurado)\n- (Opcional) Deploy automático em ambiente de staging",
      "labels": ["cicd","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Escrever roteiro de apresentação",
      "body": "- Documentar sequência de passos da demo\n- Incluir pontos-chave: registro de usuário, cálculo de risco, hedge automatizado\n- Definir tempo aproximado de cada etapa",
      "labels": ["presentation","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Criar artefatos visuais para a demo",
      "body": "- Montar slides com capturas de tela do dashboard\n- Incluir diagramas de arquitetura e fluxo de dados\n- Exportar PDF ou usar formato de apresentação desejado",
      "labels": ["deliverable","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Preparar script de demo local",
      "body": "- Criar `scripts/run_demo.sh`\n- Incluir comandos: anvil start, deploy dos contratos, registro de usuário, simulação de risco\n- Documentar no README como usá-lo",
      "labels": ["automation","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Ensaiar demo end-to-end e coletar feedback",
      "body": "- Rodar `scripts/run_demo.sh` e seguir o roteiro\n- Anotar falhas ou pontos de melhoria\n- Ajustar roteiro e código conforme feedback",
      "labels": ["QA","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Atualizar documentação final no README",
      "body": "- Sincronizar README com os últimos comandos e variáveis\n- Adicionar badges de build, coverage e release\n- Incluir link para slides ou PDF da apresentação",
      "labels": ["documentation","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    },
    {
      "title": "Criar tag v1.0.0 e draft release no GitHub",
      "body": "- Executar `git tag v1.0.0` e `git push --tags`\n- Criar draft release via `gh release create v1.0.0`\n- Incluir changelog resumo das features do MVP",
      "labels": ["release","Sprint 8","Epic: Demo & Polimento"],
      "milestone": "Sprint 8"
    }
  ]
}
