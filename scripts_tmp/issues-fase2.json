{
  "Sprint 9": [
    {
      "title": "Definir infraestrutura AWS com Terraform",
      "body": "- Criar diretório `infra/terraform/`\n- Escrever módulos para VPC, subnets e security groups\n- Gerar plano (`terraform plan`) e aplicar em staging",
      "labels": ["terraform","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Provisionar DynamoDB e S3 via Terraform",
      "body": "- Incluir recursos Terraform para DynamoDB (tabela Portfolios)\n- Definir bucket S3 para assets estáticos e modelos ML\n- Testar leitura/gravação manual após apply",
      "labels": ["terraform","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Configurar GitHub Actions CI para build e testes",
      "body": "- Atualizar `.github/workflows/ci.yml` para rodar Terraform fmt/validate\n- Incluir jobs: build Docker, lint, testes (forge, Jest)\n- Garantir pipeline falhe em erros de infra ou testes",
      "labels": ["cicd","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Configurar GitHub Actions CD para staging",
      "body": "- Criar `.github/workflows/deploy-staging.yml`\n- Fazer login no AWS ECR, build e push de containers\n- Executar `terraform apply` em workspace de staging",
      "labels": ["cicd","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Configurar monitoramento com CloudWatch e Grafana",
      "body": "- Definir métricas custom: latência API, erro 5xx, uso de CPU\n- Criar dashboard Grafana apontando para CloudWatch\n- Testar alertas de threshold em staging",
      "labels": ["monitoring","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Implementar alertas via SNS e PagerDuty",
      "body": "- Configurar tópicos SNS para alertas críticos\n- Integrar SNS com PagerDuty ou Slack\n- Validar alerta disparado em cenário simulado",
      "labels": ["alertas","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    },
    {
      "title": "Documentar deploy e operação em produção",
      "body": "- Atualizar `README.md` com passos de Terraform e CI/CD\n- Incluir instruções para acesso ao Grafana e alertas\n- Exemplos de rollback e troubleshooting",
      "labels": ["documentation","Sprint 9","Epic: Deploy e Operação em Produção"],
      "milestone": "Sprint 9"
    }
  ],
  "Sprint 10": [
    {
      "title": "Configurar Slither para análise estática de Smart Contracts",
      "body": "- Instalar Slither no projeto (`pip install slither-analyzer`)\n- Adicionar script `npm run slither` para rodar Slither em `contracts/`\n- Ajustar configurações em `slither.config.json` para ignorar false positives",
      "labels": ["security","smart-contracts","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Integrar Certora para verificação formal de contratos",
      "body": "- Configurar Certora CLI e adicionar credenciais seguras\n- Criar especificações de propriedade para `RiskGuardianCore.sol`\n- Adicionar script `npm run certora` para rodar verificações",
      "labels": ["security","smart-contracts","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Adicionar GitHub Action de análise de vulnerabilidades",
      "body": "- Criar workflow `.github/workflows/security.yml`\n- Incluir jobs: Slither scan, Certora run\n- Configurar para bloquear PRs com falhas críticas",
      "labels": ["cicd","security","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Implementar TimelockController (OpenZeppelin)",
      "body": "- Adicionar pacote `@openzeppelin/contracts`\n- Em `contracts/TimelockController.sol`, estender `TimelockController`\n- Configurar parâmetros: delay, proposers, executors",
      "labels": ["blockchain","security","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Integrar multisig via Gnosis Safe",
      "body": "- Provisionar Gnosis Safe contract e definir owners e quorum\n- Atualizar `scripts/deploy.js` para usar Safe para transações críticas\n- Documentar fluxo de assinatura de transações",
      "labels": ["blockchain","security","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Adicionar RBAC no backend",
      "body": "- Criar modelo `Role` e `UserRole` em `src/models`\n- Implementar middleware de autorização em `src/middleware/auth.ts`\n- Definir roles: admin, auditor e user",
      "labels": ["backend","security","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Escrever testes unitários para RBAC",
      "body": "- Configurar Jest para mock de usuários com diferentes roles\n- Testar acesso permitido e negado em endpoints críticos\n- Garantir cobertura de autorização ≥ 90%",
      "labels": ["backend","QA","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    },
    {
      "title": "Documentar práticas de segurança e governança",
      "body": "- Atualizar `README.md` com seções: análise estática, verificação formal, timelock, multisig, RBAC\n- Incluir exemplos de comandos e configuração de credenciais\n- Checklist de auditoria para futuras releases",
      "labels": ["documentation","security","Sprint 10","Epic: Segurança & Governança"],
      "milestone": "Sprint 10"
    }
  ],
  "Sprint 11": [
    {
      "title": "Implementar adapters de rede Avalanche, Polygon e Arbitrum",
      "body": "- Em `RiskGuardianCore.sol`, parametrizar `chainId` e endereços de oráculos por rede\n- Atualizar script de deploy para suportar múltiplos networks (Hardhat)\n- Testar deploy local usando Anvil fork de cada rede",
      "labels": ["multi-chain","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Configurar deployment multi-chain no Hardhat",
      "body": "- Em `hardhat.config.ts`, adicionar redes `avax`, `polygon`, `arbitrum` com RPC URLs\n- Criar scripts `deploy:avax`, `deploy:polygon`, `deploy:arbitrum`\n- Validar que `npx hardhat run scripts/deploy.js --network <rede>` funcione",
      "labels": ["multi-chain","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Integrar Chainlink Any API para dados customizados",
      "body": "- Escrever `AnyAPIConsumer.sol` usando `ChainlinkClient`\n- Configurar job de Any API no Flux Node ou mock local\n- Testar chamada e consumo de API externa via contrato",
      "labels": ["chainlink","any-api","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Configurar Flux Monitor para monitoramento on-chain",
      "body": "- Definir job Flux Monitor para `RiskGuardianCore` (intervalo e thresholds)\n- Configurar arquivo `flux-config.json` com parâmetros de monitoramento\n- Validar execução do Flux Monitor em ambiente local",
      "labels": ["flux-monitor","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Implementar fallback data feeds no contrato",
      "body": "- No `RiskGuardianCore.sol`, adicionar lógica `try/catch` em `getLatestPrice`\n- Configurar feed secundário para caso principal falhe\n- Escrever testes unitários para cenários de fallback",
      "labels": ["oracles","QA","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Testar integração multi-chain em Anvil com fork",
      "body": "- Criar script `scripts/test-multichain.js` para rodar testes em forks de Avalanche, Polygon e Arbitrum\n- Validar leitura de feeds e execução de upkeep em cada rede simulada\n- Documentar resultados e ajustes necessários",
      "labels": ["multi-chain","QA","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    },
    {
      "title": "Documentar suporte multi-chain e oráculos avançados",
      "body": "- Atualizar `README.md` com seção **Multi-Chain & Oráculos Avançados**\n- Descrever configuração de redes, Any API, Flux Monitor e fallback feeds\n- Exemplos de comandos para deploy e testes em cada rede",
      "labels": ["documentation","Sprint 11","Epic: Multi-Chain & Oráculos Avançados"],
      "milestone": "Sprint 11"
    }
  ],
  "Sprint 12": [
    {
      "title": "Implementar contrato HedgeStrategy.sol com múltiplas estratégias",
      "body": "- Criar `contracts/HedgeStrategy.sol` com funções para market neutral, delta hedging e stop-loss automáticos\n- Utilizar Chainlink Automation para acionar hedge baseado em parâmetros\n- Emitir eventos `StrategyExecuted` com detalhes da estratégia",
      "labels": ["blockchain","hedging","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Testar HedgeStrategy em Foundry",
      "body": "- Adicionar testes em `test/HedgeStrategy.t.sol`\n- Cobrir cenários de execução de cada estratégia\n- Garantir que stop-loss seja acionado corretamente quando thresholds são excedidos",
      "labels": ["blockchain","QA","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Desenvolver script de backtest em Python",
      "body": "- Criar `scripts/backtest.py` que simula preços históricos e cálculos de hedge\n- Utilizar `pandas` e `numpy` para manipulação de dados\n- Gerar outputs de métricas de performance em CSV",
      "labels": ["backtesting","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Executar backtest e gerar relatórios",
      "body": "- Rodar `scripts/backtest.py` com dataset real ou simulado\n- Validar resultados e identificar parâmetros ótimos\n- Salvar relatório em `reports/backtest_report.md`",
      "labels": ["backtesting","documentation","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Criar componente Dashboard de Estratégias",
      "body": "- Em `frontend/components/StrategyDashboard.tsx`, adicionar UI para seleção e configuração de estratégias\n- Exibir parâmetros e resultados de backtest\n- Integrar com estado do React Context",
      "labels": ["frontend","dashboard","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Implementar endpoint POST /api/hedge para acionamento manual",
      "body": "- Em `src/routes/hedge.ts`, criar rota POST que aciona `performUpkeep` ou transações de hedge\n- Validar payload de estratégia e parâmetros\n- Retornar status 202 com detalhes da execução",
      "labels": ["backend","api","hedging","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    },
    {
      "title": "Documentar Estratégias de Hedge no README",
      "body": "- Atualizar `README.md` com seção **Estratégias de Hedge Avançadas**\n- Incluir exemplos de uso do backtest e endpoints `/api/hedge`\n- Explanar tipos de estratégias e parâmetros configuráveis",
      "labels": ["documentation","Sprint 12","Epic: Estratégias de Hedge Avançadas"],
      "milestone": "Sprint 12"
    }
  ],
  "Sprint 13": [
    {
      "title": "Implementar notificações em tempo real com WebSockets/PWA",
      "body": "- Adicionar serviço WebSocket no backend\n- Criar cliente no frontend para receber alertas de risco\n- Exibir notificações push no PWA",
      "labels": ["notifications","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Transformar frontend em PWA",
      "body": "- Configurar `manifest.json` e `service-worker.js`\n- Ajustar Next.js para exportação como PWA\n- Testar instalação como app no mobile",
      "labels": ["pwa","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Implementar cache offline e estratégia de atualização",
      "body": "- Definir precache de assets críticos\n- Configurar runtime cache para API\n- Testar fallback offline para Dashboard",
      "labels": ["pwa","performance","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Adicionar dark mode toggle",
      "body": "- Criar botão de toggle de tema\n- Persistir preferência do usuário em localStorage\n- Ajustar classes Tailwind para dark/light",
      "labels": ["frontend","dark-mode","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Implementar internacionalização (i18n)",
      "body": "- Instalar `next-i18next` ou similar\n- Configurar arquivos de tradução para pt-BR e en-US\n- Atualizar componentes para usar `t()`",
      "labels": ["frontend","i18n","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Otimizar performance no mobile",
      "body": "- Implementar lazy loading de componentes e imagens\n- Configurar code splitting no Next.js\n- Testar métricas com Lighthouse e melhorar score",
      "labels": ["frontend","performance","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Escrever testes de PWA e mobile com Cypress e Lighthouse",
      "body": "- Configurar Cypress para mobile emulando dispositivos\n- Adicionar testes de instalação PWA e notificações\n- Incorporar Lighthouse CI no pipeline",
      "labels": ["frontend","QA","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    },
    {
      "title": "Documentar UX & Mobile no README",
      "body": "- Adicionar seção **UX & PWA Mobile**\n- Instruções de instalação, notificações, dark mode e i18n\n- Exemplos de uso e variáveis de ambiente",
      "labels": ["documentation","Sprint 13","Epic: Experiência do Usuário & Mobile"],
      "milestone": "Sprint 13"
    }
  ]
}
