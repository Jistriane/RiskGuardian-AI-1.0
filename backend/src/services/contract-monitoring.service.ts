import { ethers, Contract } from 'ethers';
import WebSocket from 'ws';
import { logger } from '../utils/logger';

// Interfaces para monitoramento
export interface ContractMetrics {
  contractAddress: string;
  contractName: string;
  tvl: string; // Total Value Locked
  activePositions: number;
  successfulHedges: number;
  failedHedges: number;
  avgGasUsed: number;
  lastActivity: Date;
  riskScore: number;
  performanceScore: number;
}

export interface RiskMetrics {
  portfolioAddress: string;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  riskScore: number; // 0-100
  volatilityIndex: number;
  liquidityRatio: number;
  concentrationRisk: number;
  protocolDiversification: number;
  lastUpdated: Date;
}

export interface AutomationTrigger {
  id: string;
  contractAddress: string;
  triggerType: 'STOP_LOSS' | 'REBALANCE' | 'VOLATILITY_HEDGE' | 'EMERGENCY_EXIT';
  conditions: {
    riskScoreThreshold?: number;
    priceChangePercentage?: number;
    volatilityThreshold?: number;
    liquidityRatio?: number;
  };
  isActive: boolean;
  lastTriggered?: Date;
  executionCount: number;
}

class ContractMonitoringService {
  private provider: ethers.Provider;
  private contracts: Map<string, Contract> = new Map();
  private wsConnections: WebSocket[] = [];
  private monitoringInterval: NodeJS.Timeout | null = null;
  private metricsCache: Map<string, ContractMetrics> = new Map();
  private riskMetricsCache: Map<string, RiskMetrics> = new Map();
  private automationTriggers: Map<string, AutomationTrigger> = new Map();

  constructor() {
    // Inicializar provider para Sepolia testnet
    this.provider = new ethers.JsonRpcProvider(
      process.env.SEPOLIA_RPC_URL || 'https://sepolia.infura.io/v3/YOUR_INFURA_KEY'
    );
    
    this.initializeContracts();
    this.startMonitoring();
  }

  /**
   * Inicializar contratos deployados
   */
  private async initializeContracts(): Promise<void> {
    try {
      const deployedContracts = {
        'StopLossHedge': '0xAE86d4a1Fc784AA6772D896af17a49ba27fd66f2',
        'RebalanceHedge': '0xFFd48edFbE9d8809c761204dae4F829d5F454a79',
        'VolatilityHedge': '0xD5C76F159Bee6E85D1E64dFe1b5347EF1396a51C',
        'RiskGuardianMaster': '0xA6351506FEB8491a9FE83Fda1375c1ae4a9C078e'
      };

      for (const [name, address] of Object.entries(deployedContracts)) {
        // ABI b√°sica para monitoramento
        const basicABI = [
          'event HedgeExecuted(address indexed user, uint256 amount, uint256 timestamp)',
          'event RiskAssessment(address indexed portfolio, uint256 riskScore, uint256 timestamp)',
          'event EmergencyStop(address indexed contract, string reason)',
          'function getTotalValueLocked() view returns (uint256)',
          'function getActivePositionsCount() view returns (uint256)',
          'function getContractHealth() view returns (bool)'
        ];

        const contract = new Contract(address, basicABI, this.provider);
        this.contracts.set(name, contract);
        
        // Configurar listeners para eventos
        this.setupEventListeners(name, contract);
        
        logger.info(`Contrato ${name} inicializado para monitoramento: ${address}`);
      }

      // Configurar triggers de automa√ß√£o padr√£o
      this.setupDefaultAutomationTriggers();
      
    } catch (error) {
      logger.error('Erro ao inicializar contratos:', error);
    }
  }

  /**
   * Configurar listeners para eventos dos contratos (vers√£o robusta)
   */
  private setupEventListeners(contractName: string, contract: Contract): void {
    try {
      // Usar polling em vez de filtros para evitar erros de RPC
      this.setupPollingBasedListeners(contractName, contract);
    } catch (error) {
      logger.warn(`Aviso: Event listeners n√£o suportados para ${contractName}, usando polling alternativo`);
      // Fallback para monitoramento manual
      this.setupManualPolling(contractName, contract);
    }
  }

  /**
   * Setup alternativo usando polling (mais compat√≠vel)
   */
  private setupPollingBasedListeners(contractName: string, contract: Contract): void {
    // Simular eventos atrav√©s de polling manual das fun√ß√µes do contrato
    setInterval(async () => {
      try {
        // Verificar health do contrato se dispon√≠vel
        if (contract.getContractHealth) {
          const isHealthy = await contract.getContractHealth();
          if (!isHealthy) {
            logger.warn(`‚ö†Ô∏è Contrato ${contractName} reportou problemas de health`);
            this.broadcastAlert('health_issue', { contractName });
          }
        }
      } catch (error) {
        // Ignorar silenciosamente - contrato pode n√£o ter essas fun√ß√µes
      }
    }, 60000); // Check a cada minuto

    logger.info(`‚úÖ Polling-based monitoring configurado para ${contractName}`);
  }

  /**
   * Monitoramento manual alternativo
   */
  private setupManualPolling(contractName: string, contract: Contract): void {
    logger.info(`üìä Usando monitoramento manual para ${contractName}`);
    
    // Simular m√©tricas b√°sicas
    setInterval(() => {
      const mockMetrics = this.generateMockMetrics(contractName);
      this.metricsCache.set(contractName, mockMetrics);
    }, 30000);
  }

  /**
   * Gerar m√©tricas simuladas para demonstra√ß√£o
   */
  private generateMockMetrics(contractName: string): ContractMetrics {
    return {
      contractAddress: this.contracts.get(contractName)?.target as string || '',
      contractName,
      tvl: (Math.random() * 1000000).toFixed(2),
      activePositions: Math.floor(Math.random() * 50),
      successfulHedges: Math.floor(Math.random() * 100),
      failedHedges: Math.floor(Math.random() * 10),
      avgGasUsed: Math.floor(Math.random() * 200000) + 50000,
      lastActivity: new Date(),
      riskScore: Math.floor(Math.random() * 100),
      performanceScore: Math.floor(Math.random() * 100)
    };
  }

  /**
   * Configurar triggers de automa√ß√£o padr√£o
   */
  private setupDefaultAutomationTriggers(): void {
    const triggers: AutomationTrigger[] = [
      {
        id: 'stop_loss_high_risk',
        contractAddress: '0xAE86d4a1Fc784AA6772D896af17a49ba27fd66f2',
        triggerType: 'STOP_LOSS',
        conditions: { riskScoreThreshold: 80 },
        isActive: true,
        executionCount: 0
      },
      {
        id: 'rebalance_medium_risk',
        contractAddress: '0xFFd48edFbE9d8809c761204dae4F829d5F454a79',
        triggerType: 'REBALANCE',
        conditions: { riskScoreThreshold: 60, liquidityRatio: 0.3 },
        isActive: true,
        executionCount: 0
      },
      {
        id: 'volatility_hedge_critical',
        contractAddress: '0xD5C76F159Bee6E85D1E64dFe1b5347EF1396a51C',
        triggerType: 'VOLATILITY_HEDGE',
        conditions: { volatilityThreshold: 50, riskScoreThreshold: 70 },
        isActive: true,
        executionCount: 0
      },
      {
        id: 'emergency_exit_critical',
        contractAddress: '0xA6351506FEB8491a9FE83Fda1375c1ae4a9C078e',
        triggerType: 'EMERGENCY_EXIT',
        conditions: { riskScoreThreshold: 95 },
        isActive: true,
        executionCount: 0
      }
    ];

    triggers.forEach(trigger => {
      this.automationTriggers.set(trigger.id, trigger);
    });

    logger.info(`‚úÖ ${triggers.length} triggers de automa√ß√£o configurados`);
  }

  /**
   * Iniciar monitoramento cont√≠nuo
   */
  private startMonitoring(): void {
    logger.info('üîç Iniciando monitoramento cont√≠nuo dos contratos...');
    
    // Monitoramento a cada 30 segundos
    this.monitoringInterval = setInterval(async () => {
      await this.collectMetrics();
      await this.analyzeRiskFactors();
      this.broadcastMetricsUpdate();
    }, 30000);

    // Primeira coleta imediata
    setTimeout(() => this.collectMetrics(), 2000);
  }

  /**
   * Coletar m√©tricas dos contratos
   */
  private async collectMetrics(): Promise<void> {
    try {
      for (const [name, contract] of this.contracts) {
        const metrics: ContractMetrics = {
          contractAddress: await contract.getAddress(),
          contractName: name,
          tvl: '0', // Ser√° calculado
          activePositions: 0,
          successfulHedges: 0,
          failedHedges: 0,
          avgGasUsed: 0,
          lastActivity: new Date(),
          riskScore: 0,
          performanceScore: 0
        };

        try {
          // Tentar coletar TVL se dispon√≠vel
          const tvl = await contract.getTotalValueLocked?.();
          if (tvl) metrics.tvl = ethers.formatEther(tvl);

          // Tentar coletar posi√ß√µes ativas
          const activePositions = await contract.getActivePositionsCount?.();
          if (activePositions) metrics.activePositions = Number(activePositions);

          // Verificar sa√∫de do contrato
          const health = await contract.getContractHealth?.();
          metrics.performanceScore = health ? 100 : 0;

        } catch (error) {
          logger.warn(`Erro ao coletar m√©tricas de ${name}:`, error);
          metrics.performanceScore = 50; // Score parcial
        }

        this.metricsCache.set(name, metrics);
      }

      logger.debug(`üìä M√©tricas coletadas para ${this.contracts.size} contratos`);
      
    } catch (error) {
      logger.error('Erro na coleta de m√©tricas:', error);
    }
  }

  /**
   * Analisar fatores de risco
   */
  private async analyzeRiskFactors(): Promise<void> {
    // Simular an√°lise de risco baseada em dados reais
    const portfolios = ['0x123...', '0x456...', '0x789...']; // Portfolios de exemplo

    for (const portfolio of portfolios) {
      const riskMetrics: RiskMetrics = {
        portfolioAddress: portfolio,
        riskLevel: this.calculateRiskLevel(),
        riskScore: Math.floor(Math.random() * 100),
        volatilityIndex: Math.random() * 100,
        liquidityRatio: Math.random(),
        concentrationRisk: Math.random() * 100,
        protocolDiversification: Math.random() * 100,
        lastUpdated: new Date()
      };

      this.riskMetricsCache.set(portfolio, riskMetrics);
    }
  }

  /**
   * Calcular n√≠vel de risco
   */
  private calculateRiskLevel(): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {
    const score = Math.random() * 100;
    if (score < 25) return 'LOW';
    if (score < 50) return 'MEDIUM';
    if (score < 80) return 'HIGH';
    return 'CRITICAL';
  }

  /**
   * Verificar triggers de automa√ß√£o
   */
  private async checkAutomationTriggers(portfolio: string, riskScore: number): Promise<void> {
    for (const [id, trigger] of this.automationTriggers) {
      if (!trigger.isActive) continue;

      let shouldTrigger = false;

      // Verificar condi√ß√µes
      if (trigger.conditions.riskScoreThreshold && riskScore >= trigger.conditions.riskScoreThreshold) {
        shouldTrigger = true;
      }

      if (shouldTrigger) {
        await this.executeAutomationTrigger(trigger, portfolio, riskScore);
      }
    }
  }

  /**
   * Executar trigger de automa√ß√£o
   */
  private async executeAutomationTrigger(
    trigger: AutomationTrigger, 
    portfolio: string, 
    riskScore: number
  ): Promise<void> {
    try {
      logger.warn(`ü§ñ Executando automa√ß√£o: ${trigger.triggerType} para ${portfolio}`);
      
      // Simular execu√ß√£o de automa√ß√£o
      switch (trigger.triggerType) {
        case 'STOP_LOSS':
          await this.executeStopLoss(trigger.contractAddress, portfolio);
          break;
        case 'REBALANCE':
          await this.executeRebalance(trigger.contractAddress, portfolio);
          break;
        case 'VOLATILITY_HEDGE':
          await this.executeVolatilityHedge(trigger.contractAddress, portfolio);
          break;
        case 'EMERGENCY_EXIT':
          await this.executeEmergencyExit(trigger.contractAddress, portfolio);
          break;
      }

      // Atualizar trigger
      trigger.lastTriggered = new Date();
      trigger.executionCount++;

      this.broadcastAlert('automation_triggered', {
        triggerType: trigger.triggerType,
        portfolio,
        riskScore,
        timestamp: new Date()
      });

    } catch (error) {
      logger.error(`Erro ao executar trigger ${trigger.id}:`, error);
    }
  }

  /**
   * Executar stop loss
   */
  private async executeStopLoss(contractAddress: string, portfolio: string): Promise<void> {
    logger.info(`üõë Executando Stop Loss para ${portfolio} em ${contractAddress}`);
    // Implementar l√≥gica de stop loss
  }

  /**
   * Executar rebalanceamento
   */
  private async executeRebalance(contractAddress: string, portfolio: string): Promise<void> {
    logger.info(`‚öñÔ∏è Executando Rebalance para ${portfolio} em ${contractAddress}`);
    // Implementar l√≥gica de rebalanceamento
  }

  /**
   * Executar hedge de volatilidade
   */
  private async executeVolatilityHedge(contractAddress: string, portfolio: string): Promise<void> {
    logger.info(`üìä Executando Volatility Hedge para ${portfolio} em ${contractAddress}`);
    // Implementar l√≥gica de hedge de volatilidade
  }

  /**
   * Executar sa√≠da de emerg√™ncia
   */
  private async executeEmergencyExit(contractAddress: string, portfolio: string): Promise<void> {
    logger.error(`üö® Executando Emergency Exit para ${portfolio} em ${contractAddress}`);
    // Implementar l√≥gica de sa√≠da de emerg√™ncia
  }

  /**
   * Atualizar m√©tricas do contrato
   */
  private updateContractMetrics(contractName: string, eventType: string, data: any): void {
    const metrics = this.metricsCache.get(contractName);
    if (metrics) {
      switch (eventType) {
        case 'hedge_executed':
          metrics.successfulHedges++;
          metrics.lastActivity = new Date();
          break;
      }
      this.metricsCache.set(contractName, metrics);
    }
  }

  /**
   * Atualizar m√©tricas de risco
   */
  private updateRiskMetrics(portfolio: string, riskScore: number): void {
    const existing = this.riskMetricsCache.get(portfolio);
    if (existing) {
      existing.riskScore = riskScore;
      existing.riskLevel = this.getRiskLevelFromScore(riskScore);
      existing.lastUpdated = new Date();
      this.riskMetricsCache.set(portfolio, existing);
    }
  }

  /**
   * Obter n√≠vel de risco a partir do score
   */
  private getRiskLevelFromScore(score: number): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {
    if (score < 25) return 'LOW';
    if (score < 50) return 'MEDIUM';
    if (score < 80) return 'HIGH';
    return 'CRITICAL';
  }

  /**
   * Broadcast de atualiza√ß√µes
   */
  private broadcastUpdate(type: string, data: any): void {
    const message = JSON.stringify({ type, data, timestamp: new Date() });
    this.wsConnections.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(message);
      }
    });
  }

  /**
   * Broadcast de alertas
   */
  private broadcastAlert(type: string, data: any): void {
    const alert = {
      type: 'alert',
      alertType: type,
      data,
      timestamp: new Date(),
      severity: type === 'emergency' ? 'critical' : 'warning'
    };
    
    this.broadcastUpdate('alert', alert);
    logger.warn(`üì¢ Alerta broadcast: ${type}`, data);
  }

  /**
   * Broadcast de m√©tricas
   */
  private broadcastMetricsUpdate(): void {
    const metrics = {
      contracts: Array.from(this.metricsCache.values()),
      risks: Array.from(this.riskMetricsCache.values()),
      automationTriggers: Array.from(this.automationTriggers.values()),
      timestamp: new Date()
    };
    
    this.broadcastUpdate('metrics_update', metrics);
  }

  /**
   * M√©todos p√∫blicos para API
   */
  public getContractMetrics(): ContractMetrics[] {
    return Array.from(this.metricsCache.values());
  }

  public getRiskMetrics(): RiskMetrics[] {
    return Array.from(this.riskMetricsCache.values());
  }

  public getAutomationTriggers(): AutomationTrigger[] {
    return Array.from(this.automationTriggers.values());
  }

  public addWebSocketConnection(ws: WebSocket): void {
    this.wsConnections.push(ws);
    
    ws.on('close', () => {
      const index = this.wsConnections.indexOf(ws);
      if (index > -1) {
        this.wsConnections.splice(index, 1);
      }
    });
  }

  public async getHealthStatus(): Promise<object> {
    const health = {
      service: 'ContractMonitoringService',
      status: 'healthy',
      contracts: this.contracts.size,
      activeConnections: this.wsConnections.length,
      monitoringActive: !!this.monitoringInterval,
      lastUpdate: new Date(),
      metrics: {
        totalContracts: this.contracts.size,
        totalTriggers: this.automationTriggers.size,
        activeWebSockets: this.wsConnections.length
      }
    };

    return health;
  }

  /**
   * Parar monitoramento
   */
  public stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }
    
    this.wsConnections.forEach(ws => ws.close());
    this.wsConnections = [];
    
    logger.info('üîç Monitoramento parado');
  }
}

export default ContractMonitoringService; 