#!/bin/bash
#
# RiskGuardian AI - Sistema Avan√ßado de Prote√ß√£o DeFi
# Author: Jistriane (jistriane@live.com)
# Description: Sistema completo de gest√£o de riscos para portfolios DeFi
# GitHub: https://github.com/Jistriane/RiskGuardian-AI-1.0
# LinkedIn: https://www.linkedin.com/in/jibso
# Twitter: @jistriane
# License: MIT
# Version: 1.0.0
# Created: 2025
#

#!/bin/bash

echo "üöÄ Iniciando Frontend RiskGuardian AI..."
echo "========================================"

# FOR√áAR IR PARA O DIRET√ìRIO FRONTEND
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

echo "üìÅ Diret√≥rio atual: $(pwd)"
echo "üìÅ Conte√∫do do diret√≥rio:"
ls -la

# Verificar se package.json existe AQUI
if [ ! -f "package.json" ]; then
    echo "‚ùå ERRO CR√çTICO: package.json n√£o encontrado em $(pwd)!"
    echo "‚ùå Conte√∫do do diret√≥rio:"
    ls -la
    exit 1
fi

echo "‚úÖ package.json encontrado!"

# Limpar processos anteriores
echo "üßπ Limpando processos anteriores..."
pkill -f "next dev" 2>/dev/null || true
pkill -f "node.*3001" 2>/dev/null || true
pkill -f "npm.*dev" 2>/dev/null || true
sleep 2

# Verificar se node_modules existe
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando depend√™ncias..."
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro ao instalar depend√™ncias!"
        exit 1
    fi
fi

# Limpar cache do Next.js
echo "üßπ Limpando cache do Next.js..."
rm -rf .next
npm cache clean --force 2>/dev/null || true

# Verificar porta 3001
echo "üîç Verificando porta 3001..."
if lsof -Pi :3001 -sTCP:LISTEN -t >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Porta 3001 em uso. Liberando..."
    kill -9 $(lsof -t -i:3001) 2>/dev/null || true
    sleep 2
fi

echo "‚úÖ Porta 3001 liberada!"

# Verificar se Next.js est√° dispon√≠vel
echo "üîç Verificando Next.js..."
if ! npx next --version >/dev/null 2>&1; then
    echo "‚ùå Next.js n√£o encontrado! Reinstalando..."
    npm install next@latest
fi

echo "‚úÖ Next.js dispon√≠vel: $(npx next --version)"

# Iniciar servidor
echo "üåê Iniciando servidor Next.js na porta 3001..."
echo "üìã Comando: npm run dev"
echo "üìã Diret√≥rio: $(pwd)"
echo "üìã Logs em: dev.log"

# Matar qualquer processo anterior
pkill -f "next dev" 2>/dev/null || true

# Iniciar em background e capturar PID
npm run dev > dev.log 2>&1 &
SERVER_PID=$!

echo "   PID do servidor: $SERVER_PID"
echo "   Salvando PID em: .server.pid"
echo $SERVER_PID > .server.pid

# Aguardar servidor iniciar com timeout
echo "‚è≥ Aguardando servidor inicializar..."
TIMEOUT=60
COUNT=0

while [ $COUNT -lt $TIMEOUT ]; do
    if curl -s http://localhost:3001 >/dev/null 2>&1; then
        echo "‚úÖ Servidor respondendo!"
        break
    fi
    
    # Verificar se processo ainda est√° rodando
    if ! kill -0 $SERVER_PID 2>/dev/null; then
        echo "‚ùå Processo do servidor morreu!"
        echo "üìã √öltimas linhas do log:"
        tail -10 dev.log
        exit 1
    fi
    
    COUNT=$((COUNT + 1))
    echo "   Tentativa $COUNT/$TIMEOUT..."
    sleep 1
done

if [ $COUNT -eq $TIMEOUT ]; then
    echo "‚ùå Timeout: Servidor n√£o respondeu em $TIMEOUT segundos"
    echo "üìã √öltimas linhas do log:"
    tail -20 dev.log
    kill $SERVER_PID 2>/dev/null || true
    exit 1
fi

# Verificar status das p√°ginas
echo ""
echo "üîç Testando p√°ginas..."
HOME_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 2>/dev/null)
DASHBOARD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/dashboard 2>/dev/null)

echo "   Homepage: HTTP $HOME_STATUS"
echo "   Dashboard: HTTP $DASHBOARD_STATUS"

# Resultado final
echo ""
if [ "$HOME_STATUS" = "200" ] || [ "$HOME_STATUS" = "307" ] || [ "$HOME_STATUS" = "404" ]; then
    echo "üéâ SUCESSO! Frontend RiskGuardian AI est√° funcionando!"
    echo ""
    echo "üåê URLs dispon√≠veis:"
    echo "   Frontend: http://localhost:3001"
    echo "   Dashboard: http://localhost:3001/dashboard"
    echo ""
    echo "üìã Comandos √∫teis:"
    echo "   Ver logs: tail -f $(pwd)/dev.log"
    echo "   Parar servidor: kill \$(cat $(pwd)/.server.pid)"
    echo "   Ou: pkill -f 'next dev'"
    echo "   PID: $SERVER_PID"
    echo ""
    echo "‚ú® Servidor rodando em background no diret√≥rio: $(pwd)"
else
    echo "‚ùå Erro: Servidor n√£o est√° respondendo corretamente"
    echo "üìã Verifique os logs em: $(pwd)/dev.log"
    echo "üìã PID do processo: $SERVER_PID"
    exit 1
fi 